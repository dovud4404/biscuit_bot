import logging
import os
import re
from telegram import Update, ReplyKeyboardRemove
from telegram.constants import ParseMode
from telegram.helpers import escape_markdown
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

NAME, PHONE, COMMENT = range(3)

GROUP_CHAT_ID = -1002697862181
BOT_TOKEN = "8170717877:AAEYlKs6kSheuLRbOlBQ-z4uwdagaR_M2Yk"

PHONE_RE = re.compile(r"^\+?\d[\d\s\-\(\)]{7,}$") 

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "üç∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø—Ä–∏–º—É –≤–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Ç–æ—Ä—Ç.\n"
        "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è)",
        reply_markup=ReplyKeyboardRemove()
    )
    return NAME


async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["name"] = update.message.text.strip()
    await update.message.reply_text("üìû –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +992‚ÄØ900‚Äë000‚Äë000):")
    return PHONE


async def ask_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    phone = update.message.text.strip()
    if not PHONE_RE.fullmatch(phone):
        await update.message.reply_text("‚ùó –¢–µ–ª–µ—Ñ–æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return PHONE

    context.user_data["phone"] = phone
    await update.message.reply_text(
        "üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–≤–∫—É—Å, –≤–µ—Å, –¥–∞—Ç–∞) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´-¬ª, –µ—Å–ª–∏ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:"
    )
    return COMMENT


async def finish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["comment"] = update.message.text.strip()
    d = context.user_data

    order_text = (
        "üéÇ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Ç–æ—Ä—Ç–∞!*\n\n"
        f"*–ò–º—è:* {escape_markdown(d['name'], version=2)}\n"
        f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {escape_markdown(d['phone'], version=2)}\n"
        f"*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {escape_markdown(d['comment'], version=2)}"
    )

    try:
        await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=order_text,
            parse_mode=ParseMode.MARKDOWN_V2,
        )
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ! üéâ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª: %s", e)
        await update.message.reply_text(
            "–£–ø—Å! –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.")
    return ConversationHandler.END


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.error("Exception while handling an update:", exc_info=context.error)



def main() -> None:
    if not (BOT_TOKEN and GROUP_CHAT_ID):
        raise RuntimeError("BOT_TOKEN –∏–ª–∏ GROUP_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    app = Application.builder().token(BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_phone)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_comment)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, finish)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    app.add_error_handler(error_handler)

    logging.info("Bot started‚Ä¶")
    app.run_polling()


if __name__ == "__main__":
    main()
